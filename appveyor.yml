#---------------------------------#
#      environment configuration  #
#---------------------------------#

version: 1.0.{build}
environment:
  gallery_api:
    secure: JQz0FeXP+JpPHxNu3Y99nqWVA8AwwG6FsahMJ8Pn7AlaDXILnp1UUUidaE4HahwI

install:
    - git clone https://github.com/PowerShell/DscResource.Tests
    - ps: Write-Verbose -Message "PowerShell version $($PSVersionTable.PSVersion)" -Verbose
    - ps: Import-Module -Name "$env:APPVEYOR_BUILD_FOLDER\DscResource.Tests\AppVeyor.psm1"
    - ps: Invoke-AppveyorInstallTask

#---------------------------------#
#      build configuration        #
#---------------------------------#

build: false

#---------------------------------#
#      test configuration         #
#---------------------------------#

test_script:
    - ps: |
        Invoke-AppveyorTestScriptTask -CodeCoverage -CodeCovIo

# scripts to run before deployment
after_test:
    - ps: |
        Import-Module -Name "$env:APPVEYOR_BUILD_FOLDER\DscResource.Tests\AppVeyor.psm1"

        $manifest = Test-ModuleManifest -Path .\GPRegistryPolicyDsc.psd1 -ErrorAction 'Stop'

        Invoke-AppveyorAfterTestTask

        <# 
            Workaround that Invoke-AppveyorAfterTestTask sets the wrong module version in the manifest.
            This allows us to change the module version in the module manifest and that will be the version
            that gets deploy.
        #>
        Update-ModuleManifest -Path .\GPRegistryPolicyDsc.psd1 -ModuleVersion $manifest.Version -ErrorAction 'Stop'

#---------------------------------#
#      deployment configuration   #
#---------------------------------#

deploy_script:
  - ps: |
        # The DscResource.Template has opt-out from any deploy task to PSGallery.
        # TODO: Opt-in to deploy tasks.
        Invoke-AppVeyorDeployTask -OptIn @()
        # Enable RDP for testing build
        $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
        # TODO: Copy the module items to be published to a folder from which it should publish. Change the paths below as needed.

        <# 
            This should follow guidelines described in the article
            https://docs.microsoft.com/powershell/gallery/how-to/publishing-packages/publishing-a-package
        #>
        if ($env:APPVEYOR_REPO_BRANCH -eq 'master')
        {
            $doTestDeploy = $false
        }
        else 
        {
            $doTestDeploy = $true
        }

        Test-ModuleManifest -Path .\GPRegistryPolicyDsc.psd1 -ErrorAction 'Stop' |
            Select-Object -Property @('Name', 'Version', 'ModuleType', 'ModuleBase')

        $filesToInclude = @('DSCResources','Modules','GPRegistryPolicyDsc.psd1', 'LICENSE','README.md','CHANGELOG.md','Examples')
        $releasePath = Split-Path -Path $pwd
        $releaseFolderPath = Join-Path -Path $releasePath -ChildPath Release
        $releaseFiles = Get-ChildItem -Path . -Include $filesToInclude -Recurse
        $releaseModulePath = (Join-Path -Path $releaseFolderPath -ChildPath GPRegistryPolicyDsc)
        # Copy-Item has to be called twice to keep the correct folder structure.
        Copy-Item -Path $releaseFiles -Destination $releaseModulePath -Force -Container
        Copy-Item -Path $releaseFiles -Destination $releaseModulePath -Force -Container -Recurse

        $publishModuleParameters = @{
            Path        = '.'
            NuGetApiKey = $env:gallery_api
            Verbose     = $true
        }

        if ($doTestDeploy)
        {
            $publishModuleParameters['WhatIf'] = $true
            $publishModuleParameters['NuGetApiKey'] = 'NoApiKey'
        }

        Publish-Module @publishModuleParameters
